!function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function t(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var n=function(){function n(e,r,o,i,a,u){var c=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t(this,"renderLikes",(function(e){c._likes=e,c._updateLikesCount(),c.isLikedByUser()?c._likeBtn.classList.add("element__like_active"):c._likeBtn.classList.remove("element__like_active")})),t(this,"_setEventListeners",(function(){c._deleteBtn=c._element.querySelector(".element__remove"),c._likeBtn=c._element.querySelector(".element__like"),c._likeBtn.addEventListener("click",(function(){return c._handleLike(c._id)})),c._deleteBtn.addEventListener("click",(function(){return c._handleRemove(c._id)})),c._element.querySelector(".element__link").addEventListener("click",(function(){return c._handleCardClick()}))})),t(this,"_updateLikesCount",(function(){c._element.querySelector(".element__like-count").textContent=c._likes.length})),t(this,"generateCard",(function(){return c._element=c._cardTemplate.cloneNode(!0),c._elementImage=c._element.querySelector(".element__image"),c._setEventListeners(),c._elementImage.src=c._link,c._elementImage.alt=c._name,c._element.querySelector(".element__text").textContent=c._name,c._ownerId!==c._userId&&(c._deleteBtn.style.display="none"),c.renderLikes(c._likes),c._element})),this._name=e.name,this._link=e.link,this._templateCardSelector=r,this._handleCardClick=o,this._handleRemove=i,this._handleLike=a,this._id=e._id,this._likes=e.likes,this._ownerId=e.owner._id,this._userId=u,this._cardTemplate=document.querySelector(this._templateCardSelector).content.querySelector(".element")}var r,o;return r=n,(o=[{key:"removeCard",value:function(){this._element.remove(),this._element=null}},{key:"isLikedByUser",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}}])&&e(r.prototype,o),n}(),r=n;function o(e){e.classList.remove("popup-box_opened"),document.removeEventListener("keydown",i),e.removeEventListener("click",a)}function i(e){"Escape"===e.key&&o(document.querySelector(".popup-box_opened"))}function a(e){var t=document.querySelector(".popup-box_opened");e.target===t&&o(t)}function u(e){document.addEventListener("keydown",i),e.addEventListener("click",a),e.classList.add("popup-box_opened")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var l=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"_showInputError",(function(e,t){var n=r._settings,o=n.inputErrorClass,i=n.errorClass,a=r._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(o),a.textContent=t,a.classList.add(i)})),s(this,"_hideInputError",(function(e){var t=r._settings,n=t.inputErrorClass,o=t.errorClass,i=r._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(n),i.classList.remove(o),i.textContent=""})),s(this,"_handleInputValidity",(function(e){e.validity.valid?r._hideInputError(e):r._showInputError(e,e.validationMessage)})),s(this,"_hasInvalidInput",(function(){return r._inputList.some((function(e){return!e.validity.valid}))})),s(this,"_toggleButtonState",(function(){var e=r._settings.submitButtonSelector;r._buttonElement=r._formElement.querySelector(e);var t=r._settings.inactiveButtonClass;r._hasInvalidInput()?r._buttonElement.classList.add(t):r._buttonElement.classList.remove(t)})),s(this,"_setEventListeners",(function(){var e=r._settings.inputSelector;r._inputList=Array.from(r._formElement.querySelectorAll(e)),r._toggleButtonState(),r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._handleInputValidity(e),r._toggleButtonState()}))}))})),s(this,"resetValidation",(function(){Array.from(r._inputList),r._toggleButtonState(),r._inputList.forEach((function(e){r._hideInputError(e)}))})),this._settings=t,this._formElement=n}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&c(t.prototype,n),e}(),f={formSelector:".input",inputSelector:".input__text",submitButtonSelector:".popup-box__action_submit",inactiveButtonClass:"popup-box__action_submit_inactive",inputErrorClass:"input__text_invalid",errorClass:"input-error_active"},p=(document.querySelector(".popup-box_type_image"),document.querySelector(".popup-box__background"),document.querySelector(".popup-box_type_edit"),document.querySelector(".popup-box_type_add"),document.querySelector(".popup-box__caption"),document.querySelector(".input_edit")),d=new l(f,p),_=document.querySelector(".input_add"),y=new l(f,_),h=new l(f,document.querySelector(".input_edit-avatar"));function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var b=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){"Escape"===e.key&&o.close()},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t),this._openedPopupClass="popup-box_opened"}var t,n;return t=e,(n=[{key:"open",value:function(){document.addEventListener("keydown",this._handleEscClose),this._popup.classList.add(this._openedPopupClass)}},{key:"close",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._popup.classList.remove(this._openedPopupClass)}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup-box__action_btn_close").addEventListener("click",(function(){return e.close()})),this._popup.addEventListener("click",(function(t){t.target.classList.contains("popup-box_opened")&&e.close()}))}}])&&m(t.prototype,n),e}();function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t,n){return S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=L(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},S(e,t,n||e)}function w(e,t){return w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},w(e,t)}function E(e,t){if(t&&("object"===v(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function L(e){return L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},L(e)}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=L(r);if(o){var n=L(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(n=[{key:"open",value:function(e){var t=e.name,n=e.link,r=this._popup.querySelector(".popup-box__background"),o=this._popup.querySelector(".popup-box__caption");r.src=n,r.alt=t,o.textContent=t,S(L(a.prototype),"open",this).call(this)}}])&&g(t.prototype,n),a}(b);function O(e){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O(e)}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t,n){return x="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},x(e,t,n||e)}function P(e,t){return P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},P(e,t)}function R(e,t){if(t&&("object"===O(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return I(e)}function I(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var B=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&P(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return R(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),U(I(n=i.call(this,e)),"showLoadingProgress",(function(){n._submitBtn.textContent="Saving..."})),U(I(n),"onLoadFinish",(function(){n._submitBtn.textContent=n._submitBtnContent})),n._submitForm=t,n._form=n._popup.querySelector(".input"),n._submitBtn=n._form.querySelector(".popup-box__action_submit"),n._submitBtnContent=n._submitBtn.textContent,n}return t=a,(n=[{key:"close",value:function(){x(q(a.prototype),"close",this).call(this),this._form.reset()}},{key:"setEventListeners",value:function(){var e=this;x(q(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitForm(e._getInputValues())}))}},{key:"_getInputValues",value:function(){var e,t=function(e){if(Array.isArray(e))return C(e)}(e=this._form.querySelectorAll(".input__text"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?C(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),n={};return t.forEach((function(e){n[e.name]=e.value})),n}}])&&j(t.prototype,n),a}(b);function T(e){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T(e)}function A(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function V(e,t,n){return V="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=J(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},V(e,t,n||e)}function N(e,t){return N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},N(e,t)}function F(e,t){if(t&&("object"===T(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return H(e)}function H(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function J(e){return J=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},J(e)}function M(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var $=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=J(r);if(o){var n=J(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return F(this,e)});function a(){var e;A(this,a);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return M(H(e=i.call.apply(i,[this].concat(n))),"setAction",(function(t){e._submitHandler=t})),e}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;V(J(a.prototype),"setEventListeners",this).call(this),this._popup.querySelector(".input").addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler()}))}}])&&D(t.prototype,n),a}(b);function z(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function G(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var K=function(){function e(t){var n,r,o=this,i=t.nameSelector,a=t.occupationSelector,u=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(){return{name:o._name.textContent,occupation:o._occupation.textContent,avatar:o._avatar.src}},(n="getUserInfo")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._nameSelector=i,this._occupationSelector=a,this._avatarSelector=u,this._name=document.querySelector(this._nameSelector),this._occupation=document.querySelector(this._occupationSelector),this._avatar=document.querySelector(this._avatarSelector)}var t,n;return t=e,(n=[{key:"setUserInfo",value:function(e){var t=e.fullName,n=e.occupation;this._name.textContent=t,this._occupation.textContent=n}},{key:"setUserAvatar",value:function(e){this._avatar.src=e}}])&&G(t.prototype,n),e}();function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function W(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Y,Z=new(function(){function e(t){var n=this,r=t.baseURL,o=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),W(this,"getInitialCards",(function(){return fetch("".concat(n._baseURL,"/cards"),{headers:n._headers}).then((function(e){return n._getResponseData(e)}))})),W(this,"getUserInfo",(function(){return fetch("".concat(n._baseURL,"/users/me"),{headers:n._headers}).then((function(e){return n._getResponseData(e)}))})),W(this,"createCard",(function(e){return fetch("".concat(n._baseURL,"/cards"),{headers:n._headers,method:"POST",body:JSON.stringify(e)}).then((function(e){return n._getResponseData(e)}))})),W(this,"deleteCard",(function(e){return fetch("".concat(n._baseURL,"/cards/").concat(e),{headers:n._headers,method:"DELETE"}).then((function(e){return n._getResponseData(e)}))})),W(this,"setUserInfo",(function(e){var t=e.name,r=e.about;return fetch("".concat(n._baseURL,"/users/me"),{headers:n._headers,method:"PATCH",body:JSON.stringify({name:t,about:r})}).then((function(e){return n._getResponseData(e)}))})),W(this,"setUserImage",(function(e){return fetch("".concat(n._baseURL,"/users/me/avatar"),{headers:n._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((function(e){return n._getResponseData(e)}))})),W(this,"likeCard",(function(e){return fetch("".concat(n._baseURL,"/cards/likes/").concat(e),{headers:n._headers,method:"PUT"}).then((function(e){return n._getResponseData(e)}))})),W(this,"unlikeCard",(function(e){return fetch("".concat(n._baseURL,"/cards/likes/").concat(e),{headers:n._headers,method:"DELETE"}).then((function(e){return n._getResponseData(e)}))})),this._baseURL=r,this._headers=o}var t,n;return t=e,(n=[{key:"_getResponseData",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}}])&&Q(t.prototype,n),e}())({baseURL:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"27cb3c49-bc49-41ab-86a1-13f7e0fb21a4","Content-Type":"application/json"}});Promise.all([Z.getInitialCards(),Z.getUserInfo()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?X(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];ue.setUserInfo({fullName:i.name,occupation:i.about}),ue.setUserAvatar(i.avatar),Y=i._id,pe.renderItems(o)})).catch((function(e){console.log(e)}));var ee=document.querySelector(".popup-box_type_edit"),te=document.querySelector(".popup-box_type_edit-avatar"),ne=document.querySelector(".popup-box_type_add"),re=p.querySelector(".input__text_type_full-name"),oe=p.querySelector(".input__text_type_occupation"),ie=document.querySelector(".input__text_type_image"),ae="#element-template";d.enableValidation(),y.enableValidation(),h.enableValidation();var ue=new K({nameSelector:".profile-info__full-name",occupationSelector:".profile-info__occupation",avatarSelector:".avatar__image"}),ce=document.querySelector(".profile-info__edit"),se=document.querySelector(".profile__add"),le=document.querySelector(".avatar__edit");function fe(e,t){var n=new r(e,t,(function(){return de.open(e)}),(function(e){_e.open(),_e.setAction((function(){Z.deleteCard(e).then((function(){n.removeCard(),_e.close()})).catch((function(e){console.log(e)}))}))}),(function(e){n.isLikedByUser()?Z.unlikeCard(e).then((function(e){return n.renderLikes(e.likes)})).catch((function(e){console.log(e)})):Z.likeCard(e).then((function(e){return n.renderLikes(e.likes)})).catch((function(e){console.log(e)}))}),Y);return n.generateCard()}ce.addEventListener("click",(function(){var e=ue.getUserInfo();re.value=e.name,oe.value=e.occupation,d.resetValidation(),u(ee)})),se.addEventListener("click",(function(){_.reset(),y.resetValidation(),u(ne)})),le.addEventListener("click",(function(){var e=ue.getUserInfo();ie.value=e.avatar,h.resetValidation(),u(te)}));var pe=new function e(t,n){var r=this,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),z(this,"addItem",(function(e){r._container.prepend(e)})),z(this,"renderItems",(function(e){e.forEach((function(e){r._renderer(e)}))})),this._renderer=o,this._container=document.querySelector(n)}({renderer:function(e){var t=fe(e,ae);pe.addItem(t)}},".elements__list"),de=new k(".popup-box_type_image"),_e=new $(".popup-box_type_remove"),ye=new B(".popup-box_type_add",(function(e){ye.showLoadingProgress(),Z.createCard(e).then((function(e){var t=fe(e,ae);pe.addItem(t),o(ne)})).catch((function(e){console.log(e)})).finally((function(){return ye.onLoadFinish()}))})),he=new B(".popup-box_type_edit",(function(e){he.showLoadingProgress(),Z.setUserInfo({name:e.fullName,about:e.occupation}).then((function(e){ue.setUserInfo({fullName:e.name,occupation:e.about}),o(ee)})).catch((function(e){console.log(e)})).finally((function(){return he.onLoadFinish()}))})),me=new B(".popup-box_type_edit-avatar",(function(e){me.showLoadingProgress(),Z.setUserImage(e.image).then((function(e){ue.setUserAvatar(e.avatar),o(te)})).catch((function(e){console.log(e)})).finally((function(){return me.onLoadFinish()}))}));de.setEventListeners(),_e.setEventListeners(),ye.setEventListeners(),he.setEventListeners(),me.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,